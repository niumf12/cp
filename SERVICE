#include <bits/stdc++.h>
using namespace std;
#define         fi first
#define         se second
#define         ll long long
#define         pb push_back
#define        pll pair<ll,ll>
#define       endl '\n'
#define    mask(i) (1LL<<(i))
#define    on(i,j) (mask(j)|(i))
#define   bit(i,j) (mask(j)&(i))
#define   off(i,j) (~mask(j)&(i))

const ll MX = 1e5 + 5;

ll n, s;

vector<pll> a[MX];

ll d[MX], D[MX];

ll VER1 = 0, VER2 = 0;

void dfs(ll u,ll par){
    for (pll x : a[u]){
        ll v = x.fi;
        if (v == par) continue;
        d[v] = d[u] + x.se;
        dfs(v,u);
    }
}

void DFS(ll u,ll par){
    for (pll x : a[u]){
        ll v = x.fi;
        if (v == par) continue;
        D[v] = D[u] + x.se;
        DFS(v,u);
    }
}

void solve(){
    cin >> n >> s;
    for (ll i = 1; i < n; ++i){
        ll x,y,w; cin >> x >> y >> w;
        a[x].push_back({y,w});
        a[y].push_back({x,w});
    }
    dfs(1, 0);
    ll MAX = 0;
    for (ll i = 1; i <= n; ++i){
        if (d[i] > MAX){
            MAX = d[i];
            VER1 = i;
        }
    }
    MAX = 0;
    memset(d,0,sizeof d);
    dfs(VER1, 0);
    for (ll i = 1; i <= n; ++i){
        if (d[i] > MAX){
            MAX = d[i];
            VER2 = i;
        }
    }
    DFS(VER2,0);
    ll res = 1e18;
    for (ll i = 1; i <= n; ++i){
        res = min(res,max(D[i],d[i]));
    }
    for (ll i = 1; i <= n; ++i){
        for (pll x : a[i]){
            if (x.se > s) continue;
            res = min(res,max({d[x.fi],d[i],D[i],D[x.fi]}));
        }
    }
    cout << res;
}

/**
5 2
1 2 5
2 3 2
2 4 4
2 5 3
**/

#define task "SERVICE"
int main(){
    if (fopen(task".inp","r")){
        freopen(task".inp","r",stdin);
        freopen(task".out","w",stdout);
    }
    ios_base::sync_with_stdio(false);
    cin.tie(NULL); cout.tie(NULL);

    solve();

    return 0;
}
